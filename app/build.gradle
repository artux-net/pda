plugins {
    id 'org.hidetake.swagger.generator' version '2.19.2'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'

    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

task downloadAPI {
    def url = new URL('https://dev.artux.net/pdanetwork/v3/api-docs/pdanetwork-rest')
    def uc = url.openConnection()
    def userPass = "pass"
    def basicAuth = "Basic " + new String(Base64.getEncoder().encode(userPass.getBytes()))
    uc.setRequestProperty("Authorization", basicAuth)

    def f = new File('app/api.json')
    uc.getInputStream().transferTo(new FileOutputStream(f))
}

swaggerSources {
    pdanetwork {
        inputFile = file('api.json')
        code {
            language = 'java'
            configFile = file('apiconfig.json')
            outputDir = file("$buildDir\\generated\\swagger-code")
        }
    }
}

gradle.projectsEvaluated {
    preBuild.dependsOn downloadAPI
    preBuild.dependsOn swaggerSources.pdanetwork.code
}

android {
    buildToolsVersion "32.0.0"
    compileSdkVersion 33
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src', "${swaggerSources.pdanetwork.code.outputDir}/src/main/java"]
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['../assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "net.artux.pda"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 14
        versionName "0.2.6"
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "PROTOCOL", "\"https\"")
            buildConfigField("String", "WS_PROTOCOL", "\"wss\"")
            buildConfigField("String", "URL", "\"files.artux.net/static/\"")
            buildConfigField("String", "URL_API", "\"dev.artux.net/pdanetwork/\"")
            buildConfigField("String", "QuestAdId", "\"ca-app-pub-4707001480680280/1079779549\"")
            buildConfigField("String", "NewsAdId", "\"ca-app-pub-4707001480680280/2723145658\"")

        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            buildConfigField("String", "PROTOCOL", "\"https\"")
            buildConfigField("String", "URL_API", "\"dev.artux.net/pdanetwork/\"")
            buildConfigField("String", "WS_PROTOCOL", "\"wss\"")
            buildConfigField("String", "URL", "\"files.artux.net/static/\"")
            buildConfigField("String", "QuestAdId", "\"ca-app-pub-3940256099942544/1033173712\"")
            buildConfigField("String", "NewsAdId", "\"ca-app-pub-3940256099942544/2247696110\"")
        }
    }
    compileOptions {
        sourceCompatibility = "1.9"
        targetCompatibility = "1.9"
    }
    buildFeatures {
        viewBinding true
    }
    lint {
        abortOnError false
    }
}

ext {
    oltu_version = "1.0.2"
    retrofit_version = "2.3.0"
    swagger_annotations_version = "2.0.0"
    junit_version = "4.12"
    threetenbp_version = "1.3.5"
    json_fire_version = "1.8.0"
    mapstruct_version = "1.5.2.Final"
    glide_version = "4.12.0"
    dagger_version = "2.43.2"
    retrofit_version = "2.9.0"
    androidx_version = "2.5.1"
}

dependencies {
    implementation "androidx.multidex:multidex:2.0.1"
    //mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.2.Final'
    kapt 'org.mapstruct:mapstruct-processor:1.5.2.Final'

    //for api code gen
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.34'  // or Swagger Codegen V3
    implementation "io.swagger.core.v3:swagger-annotations:$swagger_annotations_version"
    implementation("org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:$oltu_version") {
        exclude group: 'org.apache.oltu.oauth2', module: 'org.apache.oltu.oauth2.common'
    }
    implementation "io.gsonfire:gson-fire:$json_fire_version"
    implementation "org.threeten:threetenbp:$threetenbp_version"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'com.google.android.exoplayer:exoplayer:2.16.1'
    implementation 'com.google.firebase:firebase-ads:20.5.0'

    //androidx
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$androidx_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_version"
    implementation "androidx.core:core-ktx:1.9.0"
    implementation "androidx.fragment:fragment-ktx:1.5.2"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation 'me.grantland:autofittextview:0.2.1'
    implementation 'org.aviran.cookiebar2:cookiebar2:1.1.4'

    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'com.github.bastienpaulfr:Treessence:1.0.5'

    //firebase
    implementation platform('com.google.firebase:firebase-bom:30.3.2')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-config'
    implementation 'com.google.firebase:firebase-crashlytics'

    //ktx
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"


    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    //dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    implementation "com.google.dagger:hilt-android:$dagger_version"
    kapt "com.google.dagger:hilt-compiler:$dagger_version"

    //appodeal
    implementation('com.appodeal.ads:sdk:3.0.2.+') {
        exclude group: 'com.appodeal.ads.sdk.services', module: 'facebook_analytics'
    }
}

task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}
