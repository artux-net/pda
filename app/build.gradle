apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    signingConfigs {
        release {
            storeFile file('C:\\artux.jks')
            storePassword 'pass'
            keyAlias 'pda'
            keyPassword 'pass'
        }
    }
    buildToolsVersion "32.0.0"
    compileSdkVersion 32
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "net.artux.pda"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 19
        versionName "0.04.9"
        signingConfig signingConfigs.release
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "PROTOCOL", "\"https\"")
            buildConfigField("String", "WS_PROTOCOL", "\"wss\"")
            buildConfigField("String", "URL_API", "\"app.artux.net/pdanetwork/\"")
            buildConfigField("String", "URL", "\"api.artux.net/\"")
            buildConfigField("String", "QuestAdId", "\"ca-app-pub-4707001480680280/1079779549\"")
            buildConfigField("String", "NewsAdId", "\"ca-app-pub-4707001480680280/2723145658\"")
        }
        debug {
            debuggable true
            buildConfigField("String", "PROTOCOL", "\"https\"")
            buildConfigField("String", "WS_PROTOCOL", "\"wss\"")
            buildConfigField("String", "URL_API", "\"app.artux.net/pdanetwork/\"")
            buildConfigField("String", "URL", "\"api.artux.net/\"")
            buildConfigField("String", "QuestAdId", "\"ca-app-pub-3940256099942544/1033173712\"")
            buildConfigField("String", "NewsAdId", "\"ca-app-pub-3940256099942544/2247696110\"")
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    buildFeatures{
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.google.android.exoplayer:exoplayer:2.16.1'
    implementation 'com.google.firebase:firebase-ads:20.5.0'

    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.1'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'me.grantland:autofittextview:0.2.1'
    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'org.aviran.cookiebar2:cookiebar2:1.1.4'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'joda-time:joda-time:2.10.8'
    implementation 'com.jakewharton.timber:timber:4.7.1'


    implementation platform('com.google.firebase:firebase-bom:26.0.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'

    implementation "androidx.core:core-ktx:1.7.0"
    implementation("androidx.fragment:fragment-ktx:1.4.0")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //dagger2
    implementation 'com.google.dagger:dagger-android:2.35.1'
    implementation 'com.google.dagger:dagger-android-support:2.35.1' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.35.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.35.1'

    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
}

task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.mygdx.game/com.mygdx.game.AndroidLauncher'
}
repositories {
    mavenCentral()
}

