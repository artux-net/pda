/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: PDA NETWORK API
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package net.artux.pda.models.models

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * @property achievements
 * @property avatar
 * @property blocked
 * @property friendRelation
 * @property friends
 * @property gang
 * @property login
 * @property name
 * @property pdaId
 * @property registration
 * @property relations
 * @property role
 * @property subs
 * @property xp
 */
@JsonClass(generateAdapter = true)
data class Profile(
    @Json(name = "achievements") @field:Json(name = "achievements") var achievements: Int? = null,
    @Json(name = "avatar") @field:Json(name = "avatar") var avatar: String? = null,
    @Json(name = "blocked") @field:Json(name = "blocked") var blocked: Profile.BlockedEnum? = null,
    @Json(name = "friendRelation") @field:Json(name = "friendRelation") var friendRelation: Profile.FriendRelationEnum? = null,
    @Json(name = "friends") @field:Json(name = "friends") var friends: Int? = null,
    @Json(name = "gang") @field:Json(name = "gang") var gang: Profile.GangEnum? = null,
    @Json(name = "login") @field:Json(name = "login") var login: String? = null,
    @Json(name = "name") @field:Json(name = "name") var name: String? = null,
    @Json(name = "pdaId") @field:Json(name = "pdaId") var pdaId: Long? = null,
    @Json(name = "registration") @field:Json(name = "registration") var registration: Long? = null,
    @Json(name = "relations") @field:Json(name = "relations") var relations: GangRelationDto? = null,
    @Json(name = "role") @field:Json(name = "role") var role: Profile.RoleEnum? = null,
    @Json(name = "subs") @field:Json(name = "subs") var subs: Int? = null,
    @Json(name = "xp") @field:Json(name = "xp") var xp: Int? = null
) {
    /**
     * Values: OTHER
     */
    @JsonClass(generateAdapter = false)
    enum class BlockedEnum(val value: String) {
        @Json(name = "OTHER") OTHER("OTHER")
    }
    /**
     * Values: FRIEND, IS_NOT_FRIEND, REQUESTED, SUBSCRIBER
     */
    @JsonClass(generateAdapter = false)
    enum class FriendRelationEnum(val value: String) {
        @Json(name = "FRIEND") FRIEND("FRIEND"),
        @Json(name = "IS_NOT_FRIEND") IS_NOT_FRIEND("IS_NOT_FRIEND"),
        @Json(name = "REQUESTED") REQUESTED("REQUESTED"),
        @Json(name = "SUBSCRIBER") SUBSCRIBER("SUBSCRIBER")
    }
    /**
     * Values: BANDITS, CLEAR_SKY, DUTY, LIBERTY, LONERS, MERCENARIES, MILITARY, MONOLITH, SCIENTISTS
     */
    @JsonClass(generateAdapter = false)
    enum class GangEnum(val value: String) {
        @Json(name = "BANDITS") BANDITS("BANDITS"),
        @Json(name = "CLEAR_SKY") CLEAR_SKY("CLEAR_SKY"),
        @Json(name = "DUTY") DUTY("DUTY"),
        @Json(name = "LIBERTY") LIBERTY("LIBERTY"),
        @Json(name = "LONERS") LONERS("LONERS"),
        @Json(name = "MERCENARIES") MERCENARIES("MERCENARIES"),
        @Json(name = "MILITARY") MILITARY("MILITARY"),
        @Json(name = "MONOLITH") MONOLITH("MONOLITH"),
        @Json(name = "SCIENTISTS") SCIENTISTS("SCIENTISTS")
    }
    /**
     * Values: ADMIN, MODERATOR, USER
     */
    @JsonClass(generateAdapter = false)
    enum class RoleEnum(val value: String) {
        @Json(name = "ADMIN") ADMIN("ADMIN"),
        @Json(name = "MODERATOR") MODERATOR("MODERATOR"),
        @Json(name = "USER") USER("USER")
    }
}
