/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: PDA NETWORK API
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package net.artux.pda.models.apis

import net.artux.pda.models.models.AchievementEntity
import net.artux.pda.models.models.NoteDto
import net.artux.pda.models.models.Profile
import net.artux.pda.models.models.RegisterUser
import net.artux.pda.models.models.ResponsePage_UserInfo_
import net.artux.pda.models.models.SellerDto
import net.artux.pda.models.models.Status
import net.artux.pda.models.models.UserDto
import retrofit2.http.*

@JvmSuppressWildcards
interface DefaultApi {
    /**
     * Операция с предметом
     * The endpoint is owned by defaultname service owner
     * @param action action (required)
     * @param hash hash (optional)
     * @param seller seller (optional)
     */
    @Headers(
        "X-Operation-ID: actionWithItemUsingPOST",
      "Content-Type: application/json"
    )
    @POST("/pdanetwork/items/{action}")
    suspend fun actionWithItemUsingPOST(
        @retrofit2.http.Path("action") action: String,
        @retrofit2.http.Body hash: Int?,
        @retrofit2.http.Body seller: Int?
    ): Status
    /**
     * Добавить предмет (только для админа)
     * The endpoint is owned by defaultname service owner
     * @param id id (optional)
     * @param pdaId pdaId (optional)
     * @param quantity quantity (optional)
     * @param type type (optional)
     */
    @Headers(
        "X-Operation-ID: addItemUsingPOST",
      "Content-Type: application/json"
    )
    @POST("/pdanetwork/items/add")
    suspend fun addItemUsingPOST(
        @retrofit2.http.Body id: Int?,
        @retrofit2.http.Body pdaId: Long?,
        @retrofit2.http.Body quantity: Int?,
        @retrofit2.http.Body type: Int?
    ): Status
    /**
     * Подтверждение регистрации пользователя
     * The endpoint is owned by defaultname service owner
     * @param token token (optional)
     */
    @Headers(
        "X-Operation-ID: confirmRegistrationUsingGET"
    )
    @GET("/pdanetwork/register")
    suspend fun confirmRegistrationUsingGET(
        @retrofit2.http.Query("token") token: String?
    ): String
    /**
     * createNote
     * The endpoint is owned by defaultname service owner
     * @param title title (required)
     */
    @Headers(
        "X-Operation-ID: createNoteUsingPOST",
      "Content-Type: application/json"
    )
    @POST("/pdanetwork/notes")
    suspend fun createNoteUsingPOST(
        @retrofit2.http.Body title: String
    ): NoteDto
    /**
     * deleteNote
     * The endpoint is owned by defaultname service owner
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: deleteNoteUsingDELETE"
    )
    @DELETE("/pdanetwork/notes")
    suspend fun deleteNoteUsingDELETE(
        @retrofit2.http.Query("id") id: Long
    ): Status
    /**
     * editNote
     * The endpoint is owned by defaultname service owner
     * @param noteEntity noteEntity (required)
     */
    @Headers(
        "X-Operation-ID: editNoteUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("/pdanetwork/notes")
    suspend fun editNoteUsingPUT(
        @retrofit2.http.Body noteEntity: NoteDto
    ): NoteDto
    /**
     * Редактирование информации
     * The endpoint is owned by defaultname service owner
     * @param user user (required)
     */
    @Headers(
        "X-Operation-ID: editUserUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("/pdanetwork/edit")
    suspend fun editUserUsingPUT(
        @retrofit2.http.Body user: RegisterUser
    ): Status
    /**
     * getAchievements
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: getAchievementsUsingGET"
    )
    @GET("/pdanetwork/profile/achievements")
    suspend fun getAchievementsUsingGET(): List<AchievementEntity>
    /**
     * getAchievements
     * The endpoint is owned by defaultname service owner
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: getAchievementsUsingGET_1"
    )
    @GET("/pdanetwork/profile/achievements/{id}")
    suspend fun getAchievementsUsingGET1(
        @retrofit2.http.Path("id") id: Long
    ): List<AchievementEntity>
    /**
     * getNotes
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: getNotesUsingGET"
    )
    @GET("/pdanetwork/notes")
    suspend fun getNotesUsingGET(): List<NoteDto>
    /**
     * getProfile
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: getProfileUsingGET"
    )
    @GET("/pdanetwork/profile")
    suspend fun getProfileUsingGET(): Profile
    /**
     * getProfile
     * The endpoint is owned by defaultname service owner
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: getProfileUsingGET_1"
    )
    @GET("/pdanetwork/profile/{id}")
    suspend fun getProfileUsingGET1(
        @retrofit2.http.Path("id") id: Long
    ): Profile
    /**
     * Рейтинг пользователей
     * The endpoint is owned by defaultname service owner
     * @param number (optional)
     * @param size (optional)
     * @param sortBy (optional)
     * @param sortDirection (optional)
     */
    @Headers(
        "X-Operation-ID: getRatingUsingGET"
    )
    @GET("/pdanetwork/profile/rating")
    suspend fun getRatingUsingGET(
        @retrofit2.http.Query("number") number: Int?,
        @retrofit2.http.Query("size") size: Int?,
        @retrofit2.http.Query("sortBy") sortBy: String?,
        @retrofit2.http.Query("sortDirection") sortDirection: String?
    ): ResponsePage_UserInfo_
    /**
     * Получить продавца
     * The endpoint is owned by defaultname service owner
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: getSellerUsingGET"
    )
    @GET("/pdanetwork/items/{id}")
    suspend fun getSellerUsingGET(
        @retrofit2.http.Path("id") id: Int
    ): SellerDto
    /**
     * Пользователь
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: loginUserUsingGET"
    )
    @GET("/pdanetwork/info")
    suspend fun loginUserUsingGET(): UserDto
    /**
     * Регистрация пользователя
     * The endpoint is owned by defaultname service owner
     * @param registerUser registerUser (required)
     */
    @Headers(
        "X-Operation-ID: registerUserUsingPOST",
      "Content-Type: application/json"
    )
    @POST("/pdanetwork/register")
    suspend fun registerUserUsingPOST(
        @retrofit2.http.Body registerUser: RegisterUser
    ): Status
    /**
     * Сброс информации о прохождении
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: resetDataUsingDELETE"
    )
    @DELETE("/pdanetwork/reset/data")
    suspend fun resetDataUsingDELETE(): UserDto
    /**
     * Сброс информации о прохождении
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: resetDataUsingGET"
    )
    @GET("/pdanetwork/reset/data")
    suspend fun resetDataUsingGET(): UserDto
    /**
     * Сброс информации о прохождении
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: resetDataUsingHEAD",
      "Content-Type: application/json"
    )
    @HEAD("/pdanetwork/reset/data")
    suspend fun resetDataUsingHEAD(): UserDto
    /**
     * Сброс информации о прохождении
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: resetDataUsingOPTIONS",
      "Content-Type: application/json"
    )
    @OPTIONS("/pdanetwork/reset/data")
    suspend fun resetDataUsingOPTIONS(): UserDto
    /**
     * Сброс информации о прохождении
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: resetDataUsingPATCH",
      "Content-Type: application/json"
    )
    @PATCH("/pdanetwork/reset/data")
    suspend fun resetDataUsingPATCH(): UserDto
    /**
     * Сброс информации о прохождении
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: resetDataUsingPOST",
      "Content-Type: application/json"
    )
    @POST("/pdanetwork/reset/data")
    suspend fun resetDataUsingPOST(): UserDto
    /**
     * Сброс информации о прохождении
     * The endpoint is owned by defaultname service owner
     */
    @Headers(
        "X-Operation-ID: resetDataUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("/pdanetwork/reset/data")
    suspend fun resetDataUsingPUT(): UserDto
    /**
     * Запрос сброса пароля
     * The endpoint is owned by defaultname service owner
     * @param email email (required)
     */
    @Headers(
        "X-Operation-ID: sendLetterUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("/pdanetwork/reset")
    suspend fun sendLetterUsingPUT(
        @retrofit2.http.Query("email") email: String
    ): Status
}
